; llmbasedos/supervisord.conf 
; (Sera monté dans le conteneur à /etc/supervisor/conf.d/llmbasedos_supervisor.conf,
;  et utilisé par la commande CMD du Dockerfile)

[supervisord]
nodaemon=true                     ; Exécute supervisord au premier plan (essentiel pour Docker)
logfile=/var/log/supervisor/supervisord.log ; Chemin vers le fichier log principal de supervisord
pidfile=/var/run/supervisord.pid  ; Chemin vers le fichier PID de supervisord (peut aussi être /run/supervisord.pid)
loglevel=info                     ; Niveau de log pour supervisord lui-même
user=root                         ; Supervisord tourne en tant que root pour gérer les processus
childlogdir=/var/log/supervisor   ; Répertoire par défaut pour les logs des enfants si non spécifié par programme

; --- Configuration du serveur pour supervisorctl ---
[unix_http_server]
file=/var/run/supervisor.sock   ; Chemin vers le fichier socket UNIX pour la communication RPC
chmod=0700                       ; Permissions du fichier socket (seul root peut y accéder par défaut)
;chown=root:root                 ; Propriétaire du socket (root par défaut si supervisord est root)

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix:///var/run/supervisor.sock ; Indique à supervisorctl comment se connecter au démon
;username=quelquun                  ; Décommentez si vous activez l'authentification
;password=unmotdepasse              ; Décommentez si vous activez l'authentification
;prompt=llmbasedos>                ; Personnaliser le prompt de supervisorctl

; --- Définitions des Programmes à Gérer ---

[program:mcp-gateway]
command=/usr/local/bin/python -m llmbasedos.gateway.main
directory=/opt/app                 ; Répertoire de travail, parent du package 'llmbasedos'
user=llmuser                       ; Exécuter le processus en tant que llmuser
autostart=true                     ; Démarrer automatiquement avec supervisord
autorestart=true                   ; Redémarrer automatiquement si le processus s'arrête
stopwaitsecs=10                    ; Temps d'attente (secondes) pour un arrêt propre avant SIGKILL
stopsignal=TERM                    ; Signal à envoyer pour arrêter le processus (TERM, puis KILL si stopwaitsecs est dépassé)
stdout_logfile=/var/log/supervisor/mcp-gateway.stdout.log ; Log de la sortie standard
stderr_logfile=/var/log/supervisor/mcp-gateway.stderr.log ; Log de la sortie d'erreur
environment=PYTHONUNBUFFERED=1     ; Assure que la sortie Python n'est pas mise en mémoire tampon

[program:mcp-fs-server]
command=/usr/local/bin/python -m llmbasedos.servers.fs.server
directory=/opt/app
user=llmuser
autostart=true
autorestart=true
stopwaitsecs=10
stopsignal=TERM
stdout_logfile=/var/log/supervisor/mcp-fs-server.stdout.log
stderr_logfile=/var/log/supervisor/mcp-fs-server.stderr.log
environment=PYTHONUNBUFFERED=1

[program:mcp-sync-server]
command=/usr/local/bin/python -m llmbasedos.servers.sync.server
directory=/opt/app
user=llmuser
autostart=true
autorestart=true
stopwaitsecs=10
stopsignal=TERM
stdout_logfile=/var/log/supervisor/mcp-sync-server.stdout.log
stderr_logfile=/var/log/supervisor/mcp-sync-server.stderr.log
environment=PYTHONUNBUFFERED=1

[program:mcp-mail-server]
command=/usr/local/bin/python -m llmbasedos.servers.mail.server
directory=/opt/app
user=llmuser
autostart=true
autorestart=true
stopwaitsecs=10
stopsignal=TERM
stdout_logfile=/var/log/supervisor/mcp-mail-server.stdout.log
stderr_logfile=/var/log/supervisor/mcp-mail-server.stderr.log
environment=PYTHONUNBUFFERED=1

[program:mcp-agent-server]
command=/usr/local/bin/python -m llmbasedos.servers.agent.server
directory=/opt/app
user=llmuser
autostart=true
autorestart=true
stopwaitsecs=10
stopsignal=TERM
stdout_logfile=/var/log/supervisor/mcp-agent-server.stdout.log
stderr_logfile=/var/log/supervisor/mcp-agent-server.err.log
environment=PYTHONUNBUFFERED=1